@page "/dall-e"
@using System.ComponentModel.DataAnnotations
@using OpenAI.Interfaces
@using OpenAI.ObjectModels
@using OpenAI.ObjectModels.RequestModels
@inject IOpenAIService OpenAiService

<div class="container mx-auto p-4">
    <div class="card bg-gradient-to-r from-purple-500 via-pink-500 to-red-500 shadow-xl mb-8 text-white">
        <EditForm Model="formModel" OnValidSubmit="@HandleGenerateClick" novalidate>
            <DataAnnotationsValidator />
            <ValidationSummary class="mb-4 p-2 bg-red-200 text-red-700 rounded-md shadow-lg" />
            <div class="card-body">
                <h2 class="card-title mb-4 text-2xl font-bold">Enter Your Prompt</h2>
                <InputTextArea @bind-Value="formModel.Prompt" class="textarea textarea-bordered w-full mb-4 transition-transform transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-pink-300" placeholder="Type your prompt here..."></InputTextArea>
                <ValidationMessage class="text-red-200 bg-red-700 p-2 rounded-md mb-4 shadow-lg" For="@(() => formModel.Prompt)" />
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    <div>
                        <h2 class="card-title mb-2 text-xl font-semibold">Number of Images</h2>
                        <InputNumber @bind-Value="formModel.NumberOfImages" type="number" class="input input-bordered w-full transition-transform transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-pink-300" placeholder="Enter number of images" min="1" max="10" />
                        <ValidationMessage class="text-red-200 bg-red-700 p-2 rounded-md mt-2 shadow-lg" For="@(() => formModel.NumberOfImages)" />
                    </div>
                    <div>
                        <h2 class="card-title mb-2 text-xl font-semibold">Select Image Size</h2>
                        <InputSelect @bind-Value="formModel.ImageSize" class="select select-bordered w-full transition-transform transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-pink-300">
                            @foreach (var size in sizes)
                            {
                                <option value="@size">@size</option>
                            }
                        </InputSelect>
                        <ValidationMessage class="text-red-200 bg-red-700 p-2 rounded-md mt-2 shadow-lg" For="@(() => formModel.ImageSize)" />
                    </div>
                </div>
                <div class="card-actions justify-end">
                    @if (isLoading)
                    {
                        <button disabled="disabled" class="m-1 animate-pulse rounded-md bg-gray-500 px-4 py-2 text-lg font-semibold transition-transform transform hover:scale-110 shadow-lg">Generate</button>
                    }
                    else
                    {
                        <button type="submit" class="m-1 animate-bounce rounded-md bg-yellow-500 px-4 py-2 text-lg font-semibold transition-transform transform hover:scale-110 shadow-lg">Generate</button>
                    }
                </div>
            </div>
        </EditForm>
    </div>

    @if (isLoading)
    {
        <div class="flex justify-center items-center h-64">
            <span class="loading loading-spinner loading-lg"></span>
        </div>
    }
    else if (imageUrls.Any())
    {
        <div id="generated-results" class="card bg-base-100 shadow-xl">
            <div class="card-body">
                <h2 class="card-title mb-4 text-2xl font-bold text-white-800">Generated Result</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    @foreach (var imageUrl in imageUrls)
                    {
                        <div class="bg-base-200 p-4 rounded-lg shadow-md transition-transform transform hover:scale-105">
                            <img src="@imageUrl" alt="Generated Image" class="w-full rounded-lg shadow-sm mb-4" />
                            <a href="@imageUrl" download class="btn btn-primary w-full transition-transform transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-pink-300">Download</a>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code
{
    FormModel formModel = new();

    private bool isLoading = false;

    private IReadOnlyList<string> sizes = ["256x256", "512x512", "1024x1024"];

    // Generated Image URLs
    private List<string> imageUrls = new();

    private async Task HandleGenerateClick()
    {
        try
        {
            isLoading = true;

            var imageResult = await OpenAiService.Image.CreateImage(new ImageCreateRequest
            {
                Prompt = formModel.Prompt,
                N = formModel.NumberOfImages,
                Size = formModel.ImageSize,
                ResponseFormat = StaticValues.ImageStatics.ResponseFormat.Url,
                User = "TestUser",
                Model = OpenAI.ObjectModels.Models.Dall_e_3
            });

            if (imageResult.Successful)
            {
                imageUrls = imageResult.Results.Select(r => r.Url).ToList();
            }
            else //handle errors
            {
                if (imageResult.Error == null)
                {
                    throw new Exception("Unknown Error");
                }

                Console.WriteLine($"{imageResult.Error.Code}: ${imageResult.Error.Message}");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        finally
        {
            isLoading = false;
        }
    }

    protected class FormModel
    {
        [Required, MinLength(5), MaxLength(250)]
        public string Prompt { get; set; } = string.Empty;

        [Required, Range(1, 5)]
        public int NumberOfImages { get; set; } = 0;

        [AllowedValues("256x256", "512x512", "1024x1024")]
        public string ImageSize { get; set; } = string.Empty;
    }
}


<!--
<EditForm> :EditForm, Blazor'da bir formun temelini oluşturan bir bileşendir.

    Required: Bu özelliğin değeri boş olamaz.
    MinLenght() : Bu özelliğin değeri belirtilen uzunluktan kısa olamaz.
    MaxLenght() : Bu özelliğin değeri belirtilen uzunluktan uzun olamaz.
    AllowedValues() : Bu özelliğin değeri belirtilen değerlerden biri olmalıdır.


    OnValidSubmit: Formun geçerli olduğunda tetiklenen bir olaydır.
    Model: Formun modelini belirtir.

    <InputTextArea> : Bir metin alanı giriş bileşenidir. bind-value özelliği ile bağlanabilir.
    ValidationMessage: Bir hata durumunda bir hata iletisi görüntüler.
    <InputNumber> : Bir sayı giriş bileşenidir. bind-value özelliği ile bağlanabilir.
    <InputSelect> : Bir seçim giriş bileşenidir. bind-value özelliği ile bağlanabilir.
    <ValidationSummary> : Formdaki tüm hataları görüntüler.
    <DataAnnotationsValidator> : Veri doğrulama özelliklerini kullanarak bir bileşenin doğruluğunu doğrular. Data Annotations, bir sınıfın özelliklerini ve sınıfın kendisini doğrulamak için kullanılan bir özelliktir.
-->
